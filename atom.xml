<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YuYuYu&#39;s Blog</title>
  
  <subtitle>fish drowned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-16T16:59:27.127Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zero Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gdb notes</title>
    <link href="http://yoursite.com/2018/07/16/gdb%20notes/"/>
    <id>http://yoursite.com/2018/07/16/gdb notes/</id>
    <published>2018-07-15T16:00:00.000Z</published>
    <updated>2018-07-16T16:59:27.127Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">gcc -g main.c -o main <span class="comment"># 编译main.c</span></span><br><span class="line">g++ -g main.cpp -o main <span class="comment"># 编译main.cpp</span></span><br><span class="line"></span><br><span class="line">gdb ./main <span class="comment"># 运行gdb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># breakpoints</span></span><br><span class="line">(gdb) <span class="built_in">break</span> 7 <span class="comment"># 设置某行断点</span></span><br><span class="line">(gdb) <span class="built_in">break</span> main <span class="comment"># 设置某函数断点</span></span><br><span class="line">(gdb) b 7</span><br><span class="line">(gdb) b 7 <span class="keyword">if</span> strcmp(strA, strB) == 0 <span class="comment"># 设置条件断点</span></span><br><span class="line"></span><br><span class="line">(gdb) clear 7 <span class="comment"># 清除某行断点</span></span><br><span class="line">(gdb) delete 1 <span class="comment"># 删除某个断点</span></span><br><span class="line">(gdb) <span class="built_in">disable</span> 2 <span class="comment"># 暂停某个断点</span></span><br><span class="line">(gdb) <span class="built_in">enable</span> 2 <span class="comment"># 开启某个断点</span></span><br><span class="line">(gdb) delete breakpoints <span class="comment"># 删除所有断点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># running</span></span><br><span class="line">(gdb) run <span class="comment"># 运行</span></span><br><span class="line">(gdb) r</span><br><span class="line">(gdb) r arg1 arg2</span><br><span class="line"></span><br><span class="line">(gdb) <span class="built_in">continue</span> <span class="comment"># 继续执行</span></span><br><span class="line">(gdb) c</span><br><span class="line"></span><br><span class="line">(gdb) next <span class="comment"># 单步跟踪，不进入函数</span></span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">(gdb) step <span class="comment"># 单步跟踪，进入函数</span></span><br><span class="line">(gdb) s</span><br><span class="line"></span><br><span class="line">(gdb) until 7 <span class="comment"># 运行到某行</span></span><br><span class="line">(gdb) until <span class="comment"># 跳出循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print</span></span><br><span class="line">(gdb) <span class="built_in">print</span> num</span><br><span class="line">(gdb) p num</span><br><span class="line">(gdb) p str</span><br><span class="line">(gdb) p ++num  <span class="comment"># 执行并打印</span></span><br><span class="line">(gdb) p test_func(10)</span><br><span class="line">(gdb) p test_func(num)</span><br><span class="line"></span><br><span class="line">(gdb) <span class="built_in">print</span> &#123;<span class="built_in">type</span>&#125; variable <span class="comment"># 按照type打印</span></span><br><span class="line">(gdb) p *array@len <span class="comment"># 打印数组</span></span><br><span class="line"><span class="comment"># (gdb) set print pretty on</span></span><br><span class="line">(gdb) p struct <span class="comment"># 打印结构体</span></span><br><span class="line"></span><br><span class="line">(gdb) ptype struct</span><br><span class="line"></span><br><span class="line">(gdb) display a</span><br><span class="line">(gdb) watch a</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line">(gdb) info breakpoints</span><br><span class="line">(gdb) info b</span><br><span class="line">(gdb) info func</span><br><span class="line">(gdb) info locals</span><br><span class="line"></span><br><span class="line">(gdb) list 20</span><br><span class="line">(gdb) list main</span><br><span class="line"></span><br><span class="line"><span class="comment"># others</span></span><br><span class="line"><span class="comment"># 查询运行信息</span></span><br><span class="line">(gdb) <span class="built_in">where</span>/bt <span class="comment"># 当前运行的堆栈列表；</span></span><br><span class="line">(gdb) bt backtrace <span class="comment"># 显示当前调用堆栈</span></span><br><span class="line">(gdb) up/down <span class="comment"># 改变堆栈显示的深度</span></span><br><span class="line">(gdb) <span class="built_in">set</span> args <span class="comment"># 参数:指定运行时的参数</span></span><br><span class="line">(gdb) show args <span class="comment"># 查看设置好的参数</span></span><br><span class="line">(gdb) info program <span class="comment"># 来查看程序的是否在运行，进程号，被暂停的原因。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割窗口</span></span><br><span class="line">(gdb) layout <span class="comment"># 用于分割窗口，可以一边查看代码，一边测试：</span></span><br><span class="line">(gdb) layout src <span class="comment"># 显示源代码窗口</span></span><br><span class="line">(gdb) layout asm <span class="comment"># 显示反汇编窗口</span></span><br><span class="line">(gdb) layout regs <span class="comment"># 显示源代码/反汇编和CPU寄存器窗口</span></span><br><span class="line">(gdb) layout split <span class="comment"># 显示源代码和反汇编窗口</span></span><br><span class="line">(gdb) Ctrl + L <span class="comment"># 刷新窗口</span></span><br><span class="line"></span><br><span class="line">(gdb) quit <span class="comment"># 退出gdb</span></span><br><span class="line">(gdb) q</span><br><span class="line"></span><br><span class="line">cgdb</span><br><span class="line">gdb -tui</span><br></pre></td></tr></table></figure><p>使用 GDB 调试多进程程序：</p><ul><li><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-gdbmp/" target="_blank" rel="noopener">http://www.ibm.com/developerworks/cn/linux/l-cn-gdbmp/</a></li><li><a href="http://tieba.baidu.com/f?kz=874502809" target="_blank" rel="noopener">http://tieba.baidu.com/f?kz=874502809</a></li><li><a href="http://blog.163.com/redhumor@126/blog/static/1955478420108192540752/" target="_blank" rel="noopener">http://blog.163.com/redhumor@126/blog/static/1955478420108192540752/</a></li></ul><p>Linux Tools：</p><ul><li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html" target="_blank" rel="noopener">http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>分布式系统原理笔记</title>
    <link href="http://yoursite.com/2018/06/19/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/06/19/分布式系统原理笔记/</id>
    <published>2018-06-18T16:00:00.000Z</published>
    <updated>2018-06-19T15:20:07.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><h3 id="1-1-模型"><a href="#1-1-模型" class="headerlink" title="1.1 模型"></a>1.1 模型</h3><ul><li><h4 id="1-1-1-结点"><a href="#1-1-1-结点" class="headerlink" title="1.1.1 结点"></a>1.1.1 结点</h4><p>一个可以独立按照分布式协议完成一组逻辑的程序个体。（在具体的工程项目中，往往是一个操作系统上的进程。）</p></li><li><h4 id="1-1-2-通信"><a href="#1-1-2-通信" class="headerlink" title="1.1.2 通信"></a>1.1.2 通信</h4><p>节点之间传递信息的唯一方式是通过不可靠的网络进行通信。（因为节点与节点之间是完全独立、相互隔离的。）</p></li><li><h4 id="1-1-3-存储"><a href="#1-1-3-存储" class="headerlink" title="1.1.3 存储"></a>1.1.3 存储</h4><p>节点可以通过将数据写入与节点在同一台机器的本地存储设备保存数据。（读取数据的节点称为有状态的节点，反之称为无状态的节点。）</p></li><li><h4 id="1-1-4-异常"><a href="#1-1-4-异常" class="headerlink" title="1.1.4 异常"></a>1.1.4 异常</h4><p>分布式系统核心问题之一就是处理各种异常（failure）情况。</p><ul><li>机器宕机</li><li>网络异常<ul><li>消息丢失</li><li>消息乱序</li><li>数据错误</li><li>不可靠的TCP</li></ul></li><li>分布式系统的三态</li><li>存储数据丢失</li><li>无法归类的异常</li><li>异常处理的原则</li></ul></li></ul><h3 id="1-2-副本"><a href="#1-2-副本" class="headerlink" title="1.2 副本"></a>1.2 副本</h3><ul><li><h4 id="1-2-1-副本的概念"><a href="#1-2-1-副本的概念" class="headerlink" title="1.2.1 副本的概念"></a>1.2.1 副本的概念</h4><p>副本（replica/copy）指在分布式系统中为数据或服务提供的冗余。</p><ul><li>数据副本：解决数据丢失异常。（GFS系统中chunk的副本）</li><li>服务副本：指数个节点提供相同的服务。（Map-Reduce系统的Job-Worker）</li></ul></li><li><h4 id="1-2-2-副本一致性"><a href="#1-2-2-副本一致性" class="headerlink" title="1.2.2 副本一致性"></a>1.2.2 副本一致性</h4><p>分布式系统通过副本控制协议，使得从系统外部读取系统内部各个副本的数据在一定的约束条件下相同，称之为副本一致性（consistency）。</p><p>几种常见的一致性级别：</p><ul><li>强一致性（strong consistency）：任何时刻任何用户或节点都可以读到最近一次成功更新的副本数据。（最难实现）</li><li>单调一致性（monotonic consistency）：任何时刻，任何用户一旦读到某个数据在某次更新后的值，这个用户不会再读到比这个值更旧的值。（弱于强一致性却非常实用）</li><li>会话一致性（session consistency）：任何用户在某一次回话内一旦读到某个数据在某次更新后的值，这个用户在这次会话过程中不会再读到比这个值更旧的值。</li><li>最终一致性（eventual consistency）：最终一致性要求一旦更新成功，各个副本上的数据最终将达到完全一致的状态，但达到完全一致状态所需要的时间不能保障。</li><li>弱一致性（week consistency）：一旦某个更新成功，用户无法在一个确定时间内读到这次更新的值，且即使在某个副本上读到了新的值，也不能保证在其他副本上可以读到新的值。</li></ul></li></ul><h3 id="1-3-衡量分布式系统的指标"><a href="#1-3-衡量分布式系统的指标" class="headerlink" title="1.3 衡量分布式系统的指标"></a>1.3 衡量分布式系统的指标</h3><ul><li><h4 id="1-3-1-性能"><a href="#1-3-1-性能" class="headerlink" title="1.3.1 性能"></a>1.3.1 性能</h4><p>常见的性能（performance）指标：</p><ul><li>系统的吞吐能力</li><li>系统的响应延迟</li><li>系统的并发能力</li></ul></li><li><h4 id="1-3-2-可用性"><a href="#1-3-2-可用性" class="headerlink" title="1.3.2 可用性"></a>1.3.2 可用性</h4><p>系统的可用性（availability）指系统在面对各种异常时可以正确提供服务的能力。（衡量系统的鲁棒性，系统容错能力的体现）</p></li><li><h4 id="1-3-3-可扩展性"><a href="#1-3-3-可扩展性" class="headerlink" title="1.3.3 可扩展性"></a>1.3.3 可扩展性</h4><p>系统的可扩展性 （scalability）指分布式系统通过扩展集群机器规模提高性能（吞吐、 延迟、并发）、存储容量、计算能力的特性。（分布式系统的特有性质）</p></li><li><h4 id="1-3-4-一致性"><a href="#1-3-4-一致性" class="headerlink" title="1.3.4 一致性"></a>1.3.4 一致性</h4><p>即副本一致性。</p></li></ul><h2 id="2-分布式系统原理"><a href="#2-分布式系统原理" class="headerlink" title="2 分布式系统原理"></a>2 分布式系统原理</h2><h3 id="2-1-数据分布方式"><a href="#2-1-数据分布方式" class="headerlink" title="2.1 数据分布方式"></a>2.1 数据分布方式</h3><ul><li><h4 id="2-1-1-哈希方式"><a href="#2-1-1-哈希方式" class="headerlink" title="2.1.1 哈希方式"></a>2.1.1 哈希方式</h4><p>哈希方式是最常见的数据分布方式，其方法是按照数据的某一特征计算哈希值，并将哈希值与机器中的机器建立映射关系，从而将不同哈希值的数据分布到不同的机器上。</p><ul><li><p>缺点一：扩展性差</p><p>解决方案：</p><ul><li>哈希值取模 ==&gt; 不再取模，将对应关系作为<strong>元数据由专门的元数据服务器管理</strong>。</li><li>与2.1.2、2.1.3一样，需要以较复杂的机制维护元数据。</li></ul></li><li><p>缺点二：容易“数据倾斜”（data skew）</p><p>解决方案：</p><ul><li>==&gt; 重新选择需要哈希的数据特征。<ul><li>问题：需要完全重新分布数据，可操作性不高。</li></ul></li><li>==&gt; 使用数据的全部而不是某些维度的特征计算哈希。<ul><li>问题：数据之间关联性完全消失。</li></ul></li></ul></li></ul></li><li><h4 id="2-1-2-按数据范围分布"><a href="#2-1-2-按数据范围分布" class="headerlink" title="2.1.2 按数据范围分布"></a>2.1.2 按数据范围分布</h4><p>按数据范围分布是另一个常见的数据分布式，将数据按特征值的值域范围划分为不同的区间，使得集群中每台（组）服务器处理不同区间的数据。</p><ul><li>数据大小和区间大小没有关系。</li><li><strong>动态划分区间</strong>：方便数据迁移等负载均衡操作。</li><li>优点：灵活的根据数据量的具体情况拆分原有数据区间；扩容时可以随意添加机器。</li><li>缺点：需要维护较为复杂的多元数据服务器机制。</li></ul></li></ul><ul><li><h4 id="2-1-3-按数据量分布"><a href="#2-1-3-按数据量分布" class="headerlink" title="2.1.3 按数据量分布"></a>2.1.3 按数据量分布</h4><p>数据量分布数据与具体的数据特征无关，而是将数据视为一个顺序增长的文件，并将这个文件按照某一较为固定的大小划分为若干数据块（chunk），不同的数据块分布到不同的服务器上。</p><ul><li>优点：负载均衡和集群扩容都较为方便。</li><li>缺点：与按范围分布数据类似，需要管理较为复杂的元信息。</li></ul></li><li><h4 id="2-1-4-一致性哈希"><a href="#2-1-4-一致性哈希" class="headerlink" title="2.1.4 一致性哈希"></a>2.1.4 一致性哈希</h4><p>一致性哈希的基本方式是使用一个哈希函数计算数据或数据特征的哈希值，令该哈希函数的输出值域为一个封闭的环，即哈希函数输出的最大值是最小值的前序。将节点随机分布到这个环上，每个节点负责处理从自己开始顺时针至下一个节点的全部哈希值域上的数据。</p><ul><li>集群扩容时复杂，需要倍增节点个数。</li><li>可以任意动态添加、删除节点，每次仅影响一致性哈希环上相邻的节点。</li><li>很难均匀分布哈希值域。<ul><li>==&gt; 引入<strong>虚节点</strong>    更易实现负载均衡</li></ul></li></ul></li><li><h4 id="2-1-5-副本与数据分布"><a href="#2-1-5-副本与数据分布" class="headerlink" title="2.1.5 副本与数据分布"></a>2.1.5 副本与数据分布</h4><blockquote><p>to be continued…</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1 概念&quot;&gt;&lt;/a&gt;1 概念&lt;/h2&gt;&lt;h3 id=&quot;1-1-模型&quot;&gt;&lt;a href=&quot;#1-1-模型&quot; class=&quot;headerlink&quot; title=&quot;1.1 模
      
    
    </summary>
    
    
      <category term="Distributed System" scheme="http://yoursite.com/tags/Distributed-System/"/>
    
      <category term="HDFS" scheme="http://yoursite.com/tags/HDFS/"/>
    
      <category term="MapReduce" scheme="http://yoursite.com/tags/MapReduce/"/>
    
      <category term="Big Data" scheme="http://yoursite.com/tags/Big-Data/"/>
    
  </entry>
  
  <entry>
    <title>tmux notes</title>
    <link href="http://yoursite.com/2018/06/01/tmux%20notes/"/>
    <id>http://yoursite.com/2018/06/01/tmux notes/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-07-16T16:59:28.247Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s foo <span class="comment"># 新建名称为 foo 的会话</span></span><br><span class="line">tmux ls <span class="comment"># 列出所有 tmux 会话</span></span><br><span class="line">tmux a <span class="comment"># 恢复至上一次的会话</span></span><br><span class="line">tmux a -t foo <span class="comment"># 恢复名称为 foo 的会话，会话默认名称为数字</span></span><br><span class="line">tmux <span class="built_in">kill</span>-session -t foo <span class="comment"># 删除名称为 foo 的会话</span></span><br><span class="line">tmux <span class="built_in">kill</span>-server <span class="comment"># 删除所有的会话</span></span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmux new -s foo &lt;span class=&quot;comment&quot;&gt;# 新建名称为 foo 的会话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmux ls &lt;span class=&quot;comment&quot;&gt;# 列出所有 tmux 会话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmux a &lt;span class=&quot;comment&quot;&gt;# 恢复至上一次的会话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmux a -t foo &lt;span class=&quot;comment&quot;&gt;# 恢复名称为 foo 的会话，会话默认名称为数字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmux &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt;-session -t foo &lt;span class=&quot;comment&quot;&gt;# 删除名称为 foo 的会话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmux &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt;-server &lt;span class=&quot;comment&quot;&gt;# 删除所有的会话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>markdown notes</title>
    <link href="http://yoursite.com/2018/02/01/markdown%20notes/"/>
    <id>http://yoursite.com/2018/02/01/markdown notes/</id>
    <published>2018-01-31T16:00:00.000Z</published>
    <updated>2018-07-16T16:55:44.314Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3></li></ul><ul><li><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用</span></span><br></pre></td></tr></table></figure><blockquote><p>引用</p></blockquote></li></ul><a id="more"></a><ul><li><h4 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**粗体**</span></span><br></pre></td></tr></table></figure><p><strong>粗体</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span></span><br></pre></td></tr></table></figure><p><em>斜体</em></p></li></ul><ul><li><h4 id="图片和链接"><a href="#图片和链接" class="headerlink" title="图片和链接"></a>图片和链接</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link"></span>)</span><br></pre></td></tr></table></figure><p><img src="" alt="图片"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接</span>](<span class="link"></span>)</span><br></pre></td></tr></table></figure><p><a href="">链接</a></p></li></ul><ul><li><h4 id="行内代码和块代码"><a href="#行内代码和块代码" class="headerlink" title="行内代码和块代码"></a>行内代码和块代码</h4><p><code>行内代码</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">块代码</span><br></pre></td></tr></table></figure></li><li><h4 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="emphasis">***</span></span><br></pre></td></tr></table></figure><hr></li></ul><ul><li><h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><ul><li><h5 id="无序"><a href="#无序" class="headerlink" title="无序"></a>无序</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>1 * 1 </span><br><span class="line"><span class="bullet">- </span>2 * 2 </span><br><span class="line"><span class="bullet">- </span>3 * 3</span><br></pre></td></tr></table></figure><ul><li><p>1</p></li><li><p>2</p></li><li><p>3</p></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h4&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;# 一级标题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;## 二级标题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;### 三级标题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a&gt;二级标题&lt;/h2&gt;&lt;h3 id=&quot;三级标题&quot;&gt;&lt;a href=&quot;#三级标题&quot; class=&quot;headerlink&quot; title=&quot;三级标题&quot;&gt;&lt;/a&gt;三级标题&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h4&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&amp;gt; 引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>git guidance</title>
    <link href="http://yoursite.com/2017/08/01/git%20notes/"/>
    <id>http://yoursite.com/2017/08/01/git notes/</id>
    <published>2017-07-31T16:00:00.000Z</published>
    <updated>2018-06-15T06:04:07.654Z</updated>
    
    <content type="html"><![CDATA[<ul><li>…or create a new repository on the command line</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"# Tetris"</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin https://github.com/ZeroZsh/Tetris.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>…or push an existing repository from the command line</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/ZeroZsh/Tetris.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ul><li>…or import code from another repository</li></ul><blockquote><p>You can initialize this repository with code from a Subversion, Mercurial, or TFS project.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;…or create a new repository on the command line&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;# Tetris&quot;&lt;/span&gt; &amp;gt;&amp;gt; README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;first commit&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin https://github.com/ZeroZsh/Tetris.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push -u origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="bash" scheme="http://yoursite.com/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>辨析 Sass 中的 Map 和 List</title>
    <link href="http://yoursite.com/2015/10/21/demo/"/>
    <id>http://yoursite.com/2015/10/21/demo/</id>
    <published>2015-10-21T02:34:12.000Z</published>
    <updated>2018-06-14T04:02:49.609Z</updated>
    
    <content type="html"><![CDATA[<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p><p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p><p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p><a id="more"></a><p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p><h2 id="测试表格"><a href="#测试表格" class="headerlink" title="测试表格"></a>测试表格</h2><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><code>site</code></td><td>Sitewide information.</td></tr><tr><td><code>page</code></td><td>Page specific information and custom variables set in front-matter.</td></tr><tr><td><code>config</code></td><td>Site configuration</td></tr><tr><td><code>theme</code></td><td>Theme configuration. Inherits from site configuration.</td></tr><tr><td><code>_</code> (single underscore)</td><td><a href="http://lodash.com/" target="_blank" rel="noopener">Lodash</a> library</td></tr><tr><td><code>path</code></td><td>Path of current page</td></tr><tr><td><code>url</code></td><td>Full URL of current page</td></tr><tr><td><code>env</code></td><td>Environment variables</td></tr></tbody></table><h2 id="语法比较"><a href="#语法比较" class="headerlink" title="语法比较"></a>语法比较</h2><div class="note"><br>    <h5>测试标题</h5><br>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><br></div><h4 id="Map-语法"><a href="#Map-语法" class="headerlink" title="Map 语法"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-map: (</span><br><span class="line">    small: (</span><br><span class="line">        min-width: null,</span><br><span class="line">        max-width: 479px,</span><br><span class="line">        base-font: 16px,</span><br><span class="line">        vertical-rhythm: 1.3</span><br><span class="line">    ),</span><br><span class="line">    medium: (</span><br><span class="line">        min-width: 480px,</span><br><span class="line">        max-width: 959px,</span><br><span class="line">        base-font: 18px,</span><br><span class="line">        vertical-rhythm: 1.414</span><br><span class="line">    ),</span><br><span class="line">    large: (</span><br><span class="line">        min-width: 960px,</span><br><span class="line">        max-width: 1099px,</span><br><span class="line">        base-font: 18px,</span><br><span class="line">        vertical-rhythm: 1.5</span><br><span class="line">    ),</span><br><span class="line">    xlarge: (</span><br><span class="line">        min-width: 1100px,</span><br><span class="line">        max-width: null,</span><br><span class="line">        base-font: 21px,</span><br><span class="line">        vertical-rhythm: 1.618</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="多重列表语法"><a href="#多重列表语法" class="headerlink" title="多重列表语法"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (</span><br><span class="line">    (small, null, 479px, 16px, 1.3),</span><br><span class="line">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line">    (xlarge, 1100px, null, 21px, 1.618)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="遍历比较"><a href="#遍历比较" class="headerlink" title="遍历比较"></a>遍历比较</h2><div class="note info"><br>    <h5>测试标题</h5><br>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><br></div><h4 id="遍历-Map"><a href="#遍历-Map" class="headerlink" title="遍历 Map"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;&#125;</span><br></pre></td></tr></table></figure><p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p><p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;</span><br><span class="line">    $min-width: map-get($map, min-width);</span><br><span class="line">    $max-width: map-get($map, max-width);</span><br><span class="line">    $base-font: map-get($map, base-font);</span><br><span class="line">    $vertical-rhythm: map-get($map, vertical-rhythm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历多重列表"><a href="#遍历多重列表" class="headerlink" title="遍历多重列表"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p><p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="慎用多重列表"><a href="#慎用多重列表" class="headerlink" title="慎用多重列表"></a>慎用多重列表</h2><div class="note warning"><br>    <h5>测试标题</h5><br>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><br></div><h4 id="遗漏键值"><a href="#遗漏键值" class="headerlink" title="遗漏键值"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (</span><br><span class="line">    (small, null, 479px, 16px, 1.3),</span><br><span class="line">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line">    (xlarge, 1100px, 21px, 1.618)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line">        @if $min-width &#123;</span><br><span class="line">            @include breakpoint( $min-width ) &#123;</span><br><span class="line">                font-size: $base-font;</span><br><span class="line">                line-height: $vertical-rhythm;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; @else &#123;</span><br><span class="line">            font-size: $base-font;</span><br><span class="line">            line-height: $vertical-rhythm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p><p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p><h4 id="查找特定列表"><a href="#查找特定列表" class="headerlink" title="查找特定列表"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$medium-map: map-get($maps, medium);</span><br></pre></td></tr></table></figure><p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@function get-list($label) &#123;</span><br><span class="line">    @each $list in $breakpoint-list &#123;</span><br><span class="line">        @if nth($list, 1) == $label &#123;</span><br><span class="line">            @return $list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @return null;</span><br><span class="line">&#125;</span><br><span class="line">$medium-list: get-list(medium);</span><br></pre></td></tr></table></figure><p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p><h4 id="缺少原生的-Map-函数"><a href="#缺少原生的-Map-函数" class="headerlink" title="缺少原生的 Map 函数"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p><p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="note unreleased"><br>    <h5>Test Title</h5><br>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><br></div><p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。&lt;/p&gt;
&lt;p&gt;自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。&lt;/p&gt;
&lt;p&gt;那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 &lt;code&gt;package.json&lt;/code&gt; 或者其他同类型的项目配置文件所控制，往往只需一条命令（&lt;code&gt;gem update sass&lt;/code&gt;）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
</feed>
